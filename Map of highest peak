class Solution {
    int dirx[4] = {-1,1,0,0};
    int diry[4] = {0,0,-1,1};
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int n = isWater.size();
        int m = isWater[0].size();
        vector<vector<int>> visited(n, vector<int> (m,0));
        queue<pair<int, int>> q;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(isWater[i][j] == 0) continue;
                isWater[i][j] = 0;
                q.push({i,j});
                visited[i][j] = 1;
            }
        }
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                pair<int,int> tp = q.front();
                q.pop();
                int x = tp.first;
                int y = tp.second;
                for(int i = 0; i < 4; i++)
                {
                    int nxtx = x + dirx[i];
                    int nxty = y + diry[i];
                    if(nxtx >= n || nxty >= m || nxtx < 0 || nxty < 0 || visited[nxtx][nxty]) continue;
                    isWater[nxtx][nxty] = isWater[x][y]+1;
                    visited[nxtx][nxty] = 1;
                    q.push({nxtx,nxty});
                } 
            }
        }
        return isWater;
    }
};
